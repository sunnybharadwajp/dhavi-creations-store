generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id
  email             String    @unique
  password_hash     String
  usertype          String    @default("customer")
  sessions          Session[]
  customer          Customer?
  verification_code String?
  createdAt         DateTime  @default(now())
  is_verified       Boolean   @default(false)
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Customer {
  id         Int      @id @default(autoincrement())
  name       String
  address    String?
  city       String?
  phone      String?
  state      String?
  postalCode String?
  country    String?
  createdAt  DateTime @default(now())
  // orders      Order[]
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique
}

model Product {
  id            Int     @id @default(autoincrement())
  designId      Int
  design        Design  @relation(fields: [designId], references: [id], onDelete: Cascade)
  clothId       Int
  cloth         Cloth   @relation(fields: [clothId], references: [id], onDelete: Cascade)
  price         Float
  stockQuantity Int
  sku           String? @unique
  discount      Int?    @default(0)
}

model Design {
  id              Int           @id @default(autoincrement())
  name            String
  description     String
  price           Float
  images          DesignImage[]
  coverImageIndex Int?
  createdAt       DateTime      @default(now())
  products        Product[]
}

model Cloth {
  id         Int       @id @default(autoincrement())
  clothType  String
  clothColor String
  imageUrl   String
  price      Float
  products   Product[]
}

model DesignImage {
  id       Int    @id @default(autoincrement())
  imageUrl String
  designId Int
  design   Design @relation(fields: [designId], references: [id], onDelete: Cascade)
}

// model Order {
//   id          Int         @id @default(autoincrement())
//   customerId  Int
//   orderDate   DateTime    @default(now())
//   status      String      @default("Pending")
//   totalAmount Float
//   customer    Customer    @relation(fields: [customerId], references: [id])
//   orderItems  OrderItem[]
// }

// model OrderItem {
//   id        Int     @id @default(autoincrement())
//   orderId   Int
//   productId Int
//   quantity  Int
//   price     Float
//   order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
//   product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
// }
